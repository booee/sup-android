buildscript {
	project.ext {
		versions = [
			androidTools : "1.3.1"
			, appcompatv7: "23.0.1"
			, buildTools : "23.0.1"
			, minSdk     : 16
			, fabric     : "1.+""
			, sdk        : 23
			// test
			, junit       : "4.12"
			, mockito     : "2.0.31-beta"
		]
	}
	repositories {
		jcenter()
    	maven { url "https://maven.fabric.io/public" }
	}
	dependencies {
		classpath group: "com.android.tools.build", name: "gradle", version: project.ext.versions.androidTools
    	classpath group: "io.fabric.tools", name: "gradle", version: project.ext.versions.fabric
	}
}

repositories {
	jcenter()
	maven { url "https://maven.fabric.io/public" }
}

apply plugin: "com.android.application"
apply plugin: "idea"
apply plugin: "io.fabric"

android {
	compileSdkVersion project.ext.versions.sdk
	buildToolsVersion project.ext.versions.buildTools

	defaultConfig {
		applicationId "us.broani.sup"
		minSdkVersion project.ext.versions.minSdk
		targetSdkVersion project.ext.versions.sdk
		versionCode 1
		versionName "0.1.6"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
		}
	}

	lintOptions {
		abortOnError false
	}

	testOptions.unitTests.all {
		testLogging {
			events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
		}
	}
}

dependencies {
	compile group: "com.android.support", name: "appcompat-v7", version: project.ext.versions.appcompatv7

	testCompile group: "junit", name: "junit", version: project.ext.versions.junit
	testCompile group: "org.mockito", name: "mockito-core", version: project.ext.versions.mockito
}

task cd << {
	println "Executing Continuous Delivery Tasks"

	String isPR = "$System.env.TRAVIS_PULL_REQUEST"
	if("false" == isPR) {
		println "Not Pull Request"
		tasks.deployTestBuild.execute();
	} else {
		println "Pull Request detected. Skipping deployTestBuild step"
	}

	// TODO: deploy release artifacts
		// TODO: sign release APKs
		// TODO: deploy to release channels
}
ci.dependsOn("build");
ci.mustRunAfter("build");

task deployTestBuild << {
	println "Deploying artifacts to test channel"
	tasks.crashlyticsUploadDistributionDebug.execute();
}
deployTestBuild.dependsOn("assembleDebug");
deployTestBuild.mustRunAfter("assembleDebug");

task fabric << {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
		String secret = "$System.env.FABRIC_API_SECRET"
		String key = "$System.env.FABRIC_API_KEY"

		if(secret == "null") throw new InvalidUserDataException("Environment variable FABRIC_API_SECRET not found")
		if(key == "null") throw new InvalidUserDataException("Environment variable FABRIC_API_KEY  not set")

        def commentMessage = "This file is generated using environment variables FABRIC_API_SECRET and FABRIC_API_KEY"
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: secret)
            entry(key: "apiKey", value: key)
        }
    } else {
		println "fabric.properties already exists. Can regenerate by running cleanFabric"
	}
}

task cleanFabric << {
    delete "fabric.properties"
}

afterEvaluate {
	tasks.fabric.execute();
}

// android studio runs these tasks on gradle sync
tasks.idea.dependsOn "generateDebugSources", "generateDebugAndroidTestSources"
tasks.idea.mustRunAfter "generateDebugSources", "generateDebugAndroidTestSources"
