buildscript {
	project.ext {
		versions = [
			androidTools : "1.3.1"
			, appcompatv7: "23.0.1"
			, buildTools : "23.0.1"
			, minSdk     : 16
			, sdk        : 23
			// test
			, junit       : "4.12"
			, mockito     : "2.0.31-beta"
		]
	}
	repositories {
		jcenter()
    	maven { url 'https://maven.fabric.io/public' }
	}
	dependencies {
		classpath group: "com.android.tools.build", name: "gradle", version: project.ext.versions.androidTools
    	classpath 'io.fabric.tools:gradle:1.+'
	}
}

repositories {
	jcenter()
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: "com.android.application"
apply plugin: "idea"
apply plugin: 'io.fabric'

android {
	compileSdkVersion project.ext.versions.sdk
	buildToolsVersion project.ext.versions.buildTools

	defaultConfig {
		applicationId "us.broani.sup"
		minSdkVersion project.ext.versions.minSdk
		targetSdkVersion project.ext.versions.sdk
		versionCode 1
		versionName "0.1.5"
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
		}
	}

	lintOptions {
		abortOnError false
	}

	testOptions.unitTests.all {
		testLogging {
			events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
		}
	}
}

dependencies {
	compile group: "com.android.support", name: "appcompat-v7", version: project.ext.versions.appcompatv7

	testCompile group: "junit", name: "junit", version: project.ext.versions.junit
	testCompile group: "org.mockito", name: "mockito-core", version: project.ext.versions.mockito
}

task ci << {
	println "Executing Continuous Integration"

	String isPR = "$System.env.TRAVIS_PULL_REQUEST"

	if("false" == isPR) {
		println "Deploying artifacts to test channel"
		tasks.crashlyticsUploadDistributionDebug.execute();
	} else {
		println "Pull Request detected, skipping deployment stage"
	}
}
ci.dependsOn("test");
ci.mustRunAfter("test");

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: FABRIC_API_SECRET)
            entry(key: "apiKey", value: FABRIC_API_KEY)
        }
    }
}

// android studio runs these tasks on gradle sync
tasks.idea.dependsOn "generateDebugSources", "generateDebugAndroidTestSources"
tasks.idea.mustRunAfter "generateDebugSources", "generateDebugAndroidTestSources"
